$#include <interfaces/MultiTypedObjectInterface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class MultiTypedObjectInterface : public Interface
{

  unsigned int obj_id();
  void set_obj_id(const unsigned int new_obj_id);
  int maxlenof_obj_id() const;
  char * type_1();
  void set_type_1(const char * new_type_1);
  int maxlenof_type_1() const;
  char * type_2();
  void set_type_2(const char * new_type_2);
  int maxlenof_type_2() const;
  char * type_3();
  void set_type_3(const char * new_type_3);
  int maxlenof_type_3() const;
  char * type_4();
  void set_type_4(const char * new_type_4);
  int maxlenof_type_4() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual Message *   create_message(const char *type) const = 0;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  Message *     msgq_first();
  bool          msgq_empty();


};

}
